

// freeAction.tpa

// free action does not prevent haste


// there are two movement modifiers available: 126 and 176

// basic idea is this:
// use 126 for negative modification
// use 176 for positive modification

// always remove every immunity:176


// collect all spells that apply an opcode 16 (haste)
//

// whenever have opcode 163 (free action)
// remvove every	206 (protect) : all haste spells
//					126 (move mod)
//					176 (move mod) if neutral
//					101 (immunity) :16 (haste)
//					169 (no icon): 38 (haste icon)
// and add			101 (immunity): 126 (-move)



DEFINE_ACTION_FUNCTION FA_IMPLEMENT_FREE_ACTION
	STR_VAR logFile = ~~	// lists all spells that apply a haste opcode
BEGIN
	LAF TRUNCATE_FILE STR_VAR file = EVAL ~%logFile%~ END	// reset log
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
		PATCH_IF NOT(~%SOURCE_FILE%~ STR_EQ ~A7!EQMA.ITM~ OR ~%SOURCE_FILE%~ STR_EQ~!SAMAUNA.ITM~) BEGIN
			LPF FA_REWRITE_MOVE_MODS INT_VAR abilLen = 0x38 END
		END
	BUT_ONLY
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
		LPF FA_REWRITE_MOVE_MODS INT_VAR abilLen = 0x28 END
		LPF APPLIES_EFFECT_SPL INT_VAR opcode = 16 RET value = value END
		PATCH_IF value BEGIN	// the spell applies a haste opcode
			LPF UPDATE_LOG STR_VAR file = EVAL ~%logFile%~ value = EVAL ~%SOURCE_RES%~ END	// add spell to log
		END
	BUT_ONLY
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
		LPF FA_REWRITE_MOVE_MODS_CRE END
	BUT_ONLY
	
	// every negative movement rate bonus is now opcode 126
	// every positive/neutral movement rate bonus is now opcode 176
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
		PATCH_IF NOT(~%SOURCE_FILE%~ STR_EQ ~A7!EQMA.ITM~ OR ~%SOURCE_FILE%~ STR_EQ~!SAMAUNA.ITM~) BEGIN
			LPF FA_COMPLEMENT_FREE_ACTION INT_VAR abilLen = 0x38 STR_VAR logFile = EVAL ~%logFile%~ END
		END
	BUT_ONLY
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.spl$~ ~override~
		LPF FA_COMPLEMENT_FREE_ACTION INT_VAR abilLen = 0x28 STR_VAR logFile = EVAL ~%logFile%~ END
	BUT_ONLY
	
	COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
		LPF FA_COMPLEMENT_FREE_ACTION_CRE STR_VAR logFile = EVAL ~%logFile%~ END
	BUT_ONLY
END

DEFINE_PATCH_FUNCTION FA_COMPLEMENT_FREE_ACTION
	INT_VAR abilLen = 0x28
	STR_VAR logFile = ~~
BEGIN
	LPF SANITIZE_ITM_OR_SPL INT_VAR abilLen = abilLen RET ok = ok END
	PATCH_IF ok BEGIN
		READ_LONG 0x64 abilOff
		READ_SHORT 0x68 abilNum
		READ_LONG 0x6a fxOff
		READ_SHORT 0x70 fxNum
		FOR (a = 0; a < abilNum; ++a) BEGIN
			abOff = abilOff + a * abilLen
			READ_SHORT (abOff + 0x1e) afxNum
			READ_SHORT (abOff + 0x20) afxIdx
			FOR (f = afxNum - 1; f >= 0; --f) BEGIN
				off = fxOff + (afxIdx + f) * 0x30
				LPF READ_EFFECT 
					INT_VAR	off = off
					RET		opcode = opcode		target = target
							prob1 = prob1		prob2 = prob2
							sType = sType		sBonus = sBonus
				END
				PATCH_IF (opcode = 163) BEGIN	// opcode: free action
					FOR (g = afxNum - 1; g >= 0; --g) BEGIN
						off = fxOff + (afxIdx + g) * 0x30
						LPF READ_EFFECT 
							INT_VAR	off = off
							RET		opcode = opcode		targetB = target
									param1 = param1		param2 = param2
									prob1B = prob1		prob2B = prob2
									sTypeB = sType		sBonusB = sBonus
						END
						PATCH_IF (
							targetB = target
							AND prob1B = prob1
							AND prob2B = prob2
							AND sTypeB = sType
							AND sBonusB = sBonus
						) BEGIN									// effect is related
							READ_STRREF (off + 0x04) strRef
							PATCH_IF (
								opcode = 126					// opcode: move mod -
								OR 
								opcode = 176					// opcode: move mod +
								OR 
								(opcode = 101 AND param2 = 16)	// immune: haste
								OR 
								(opcode = 101 AND param2 = 126)	// immune: move mod -
								OR 
								(opcode = 101 AND param2 = 176)	// immune: move mod +
								OR 
								(opcode = 169 AND param2 = 38)	// prevent icon: haste
								OR 
								(opcode = 240 AND param2 = 38)	// remove icon: haste
								OR
								(opcode = 267 AND (~%strRef%~ STRING_EQUAL_CASE ~hasted~))	// prevent string: hasted
							) BEGIN
								LPF REMOVE_ABILITY_EFFECT INT_VAR abilLen = abilLen abilIdx = a idx = g END
								PATCH_IF (g < f) BEGIN
									--f
								END
								--afxNum
							END
						END
					END
					
					LPF GET_FILE_SIZE STR_VAR file = EVAL ~%logFile%~ RET logLen = value END
					FOR (i = 0; i < logLen; i += 8) BEGIN
						LPF READ_LOG INT_VAR off = i STR_VAR file = EVAL ~%logFile%~ RET res = value END
						FOR (g = afxNum - 1; g >= 0; --g) BEGIN
							off = fxOff + (afxIdx + g) * 0x30
							LPF READ_EFFECT 
								INT_VAR	off = off
								RET		opcode = opcode		targetB = target
										param1 = param1		param2 = param2
										prob1B = prob1		prob2B = prob2
										resB = res			sTypeB = sType
										sBonusB = sBonus
							END
							PATCH_IF (
								targetB = target
								AND prob1B = prob1
								AND prob2B = prob2
								AND sTypeB = sType
								AND sBonusB = sBonus
							) BEGIN									// effect is related
								PATCH_IF (opcode = 206 AND (~%resB%~ STRING_EQUAL_CASE ~%res%~)) BEGIN
									// remove protection from haste spell resource
									LPF REMOVE_ABILITY_EFFECT INT_VAR abilLen = abilLen abilIdx = a idx = g END
									PATCH_IF (g < f) BEGIN
										--f
									END
									--afxNum
								END
							END
						END
					END
					
					// add immune: move mod -
					LPF COPY_ABILITY_EFFECT
						INT_VAR abilLen = abilLen
								abilIdx = a
								idx = f
								toIdx = f + 1
						RET		off = off
					END
					WRITE_SHORT off 101				// immu: opcode
					WRITE_LONG (off + 0x08) 126		// move mod - 
					++afxNum
					// done adding
					
				END
			END
		END
		FOR (f = fxNum - 1; f >= 0; --f) BEGIN
			off = fxOff + f * 0x30
			LPF READ_EFFECT 
				INT_VAR	off = off
				RET		opcode = opcode	
						target = target
						prob1 = prob1
						prob2 = prob2
						sType = sType
						sBonus = sBonus
			END
			PATCH_IF (opcode = 163) BEGIN	// opcode: free action
				FOR (g = fxNum - 1; g >= 0; --g) BEGIN
					off = fxOff + g * 0x30
					LPF READ_EFFECT 
						INT_VAR	off = off
						RET		opcode = opcode
								targetB = target
								param1 = param1
								param2 = param2
								prob1B = prob1
								prob2B = prob2
								sTypeB = sType
								sBonusB = sBonus
					END
					PATCH_IF (
						targetB = target
						AND prob1B = prob1
						AND prob2B = prob2
						AND sTypeB = sType
						AND sBonusB = sBonus
					) BEGIN									// effect is related
						READ_STRREF (off + 0x04) strRef
						PATCH_IF (
							opcode = 126					// opcode: move mod -
							OR 
							opcode = 176					// opcode: move mod +
							OR 
							(opcode = 101 AND param2 = 16)	// immune: haste
							OR 
							(opcode = 101 AND param2 = 126)	// immune: move mod -
							OR 
							(opcode = 101 AND param2 = 176)	// immune: move mod +
							OR 
							(opcode = 169 AND param2 = 38)	// prevent icon: haste
							OR 
							(opcode = 240 AND param2 = 38)	// remove icon: haste
							OR
							(opcode = 267 AND (~%strRef%~ STRING_EQUAL_CASE ~hasted~))	// prevent string: hasted
						) BEGIN
							LPF REMOVE_EFFECT INT_VAR abilLen = abilLen idx = g END
							PATCH_IF (g < f) BEGIN
								--f
							END
							--fxNum
						END
					END
				END
				
				LPF GET_FILE_SIZE STR_VAR file = EVAL ~%logFile%~ RET logLen = value END
				FOR (i = 0; i < logLen; i += 8) BEGIN
					LPF READ_LOG INT_VAR off = i STR_VAR file = EVAL ~%logFile%~ RET res = value END
					FOR (g = fxNum - 1; g >= 0; --g) BEGIN
						off = fxOff + g * 0x30
						LPF READ_EFFECT 
							INT_VAR	off = off
							RET		opcode = opcode
									targetB = target
									param1 = param1
									param2 = param2
									prob1B = prob1
									prob2B = prob2
									resB = res
									sTypeB = sType
									sBonusB = sBonus
						END
						PATCH_IF (
							targetB = target
							AND prob1B = prob1
							AND prob2B = prob2
							AND sTypeB = sType
							AND sBonusB = sBonus
						) BEGIN									// effect is related
							PATCH_IF (opcode = 206 AND (~%resB%~ STRING_EQUAL_CASE ~%res%~)) BEGIN
								// remove protection from haste spell resource
								LPF REMOVE_EFFECT INT_VAR abilLen = abilLen idx = g END
								PATCH_IF (g < f) BEGIN
									--f
								END
								--fxNum
							END
						END
					END
				END
				
				
				// add immune: move mod -
				LPF COPY_EFFECT
					INT_VAR abilLen = abilLen
							idx = f
							toIdx = f + 1
					RET		off = off
				END
				WRITE_SHORT off 101				// immu: opcode
				WRITE_LONG (off + 0x08) 126		// move mod - 
				++fxNum
				// done adding
				
			END
		END
	END
END

DEFINE_PATCH_FUNCTION FA_COMPLEMENT_FREE_ACTION_CRE
	STR_VAR logFile = ~~
BEGIN
	LPF SANITIZE_CRE RET ok = ok END
	PATCH_IF ok BEGIN
		READ_LONG 0x2c4 fxOff
		READ_LONG 0x2c8 fxNum
		FOR (f = fxNum - 1; f >= 0; --f) BEGIN
			off = fxOff + f * 0x108
			LPF READ_EFFECT_CRE
				INT_VAR	off = off
				RET		opcode = opcode		target = target
						prob1 = prob1		prob2 = prob2
						sType = sType		sBonus = sBonus
			END
			PATCH_IF (opcode = 163) BEGIN	// Free Action
				FOR (g = fxNum - 1; g >= 0; --g) BEGIN
					off = fxOff + g * 0x108
					LPF READ_EFFECT_CRE
						INT_VAR	off = off
						RET		opcode = opcode		targetB = target
								param1 = param1		param2 = param2
								prob1B = prob1		prob2B = prob2
								sTypeB = sType		sBonusB = sBonus
					END
					PATCH_IF (
						targetB = target
						AND prob1B = prob1
						AND prob2B = prob2
						AND sTypeB = sType
						AND sBonusB = sBonus
					) BEGIN									// effect is related
						READ_STRREF (off + 0x14) strRef
						PATCH_IF (
							opcode = 126					// opcode: move mod -
							OR 
							opcode = 176					// opcode: move mod +
							OR 
							(opcode = 101 AND param2 = 16)	// immune: haste
							OR
							(opcode = 101 AND param2 = 126)	// immune: move mod -
							OR 
							(opcode = 101 AND param2 = 176)	// immune: move mod +
							OR 
							(opcode = 169 AND param2 = 38)	// prevent icon: haste
							OR 
							(opcode = 240 AND param2 = 38)	// remove icon: haste
							OR
							(opcode = 267 AND (~%strRef%~ STRING_EQUAL_CASE ~Hasted~))	// prevent string: hasted
							OR
							(opcode = 267 AND (~%strRef%~ STRING_EQUAL_CASE ~Beschleunigt~))	// prevent string: hasted
						) BEGIN
							LPF REMOVE_EFFECT_CRE INT_VAR idx = g END
							PATCH_IF (g < f) BEGIN
								--f
							END
							--fxNum
						END
					END
				END
				
				LPF GET_FILE_SIZE STR_VAR file = EVAL ~%logFile%~ RET logLen = value END
				FOR (i = 0; i < logLen; i += 8) BEGIN
					LPF READ_LOG INT_VAR off = i STR_VAR file = EVAL ~%logFile%~ RET res = value END
					FOR (g = fxNum - 1; g >= 0; --g) BEGIN
						off = fxOff + g * 0x108
						LPF READ_EFFECT_CRE 
							INT_VAR	off = off
							RET		opcode = opcode		targetB = target
									param1 = param1		param2 = param2
									prob1B = prob1		prob2B = prob2
									resB = res			sTypeB = sType
									sBonusB = sBonus
						END
						PATCH_IF (
							targetB = target
							AND prob1B = prob1
							AND prob2B = prob2
							AND sTypeB = sType
							AND sBonusB = sBonus
						) BEGIN									// effect is related
							PATCH_IF (opcode = 206 AND (~%resB%~ STRING_EQUAL_CASE ~%res%~)) BEGIN
								// remove protection from haste spell resource
								LPF REMOVE_EFFECT_CRE INT_VAR idx = g END
								PATCH_IF (g < f) BEGIN
									--f
								END
								--fxNum
							END
						END
					END
				END
				
				
				
				// add immune: move mod -
				LPF COPY_EFFECT_CRE
					INT_VAR idx = f
							toIdx = f + 1
					RET		off = off
				END
				WRITE_LONG (off + 0x08) 101		// immu: opcode
				WRITE_LONG (off + 0x18) 126		// move mod - 
				++fxNum
				// done adding
			END
		END
	END
END

DEFINE_PATCH_FUNCTION FA_REWRITE_MOVE_MODS
	INT_VAR abilLen = 0x28
BEGIN
	LPF SANITIZE_ITM_OR_SPL INT_VAR abilLen = abilLen RET ok = ok END
	PATCH_IF ok BEGIN
		READ_LONG 0x64 abilOff
		READ_SHORT 0x68 abilNum
		READ_LONG 0x6a fxOff
		READ_SHORT 0x70 fxNum
		FOR (a = 0; a < abilNum; ++a) BEGIN
			abOff = abilOff + a * abilLen
			READ_SHORT (abOff + 0x1e) afxNum
			READ_SHORT (abOff + 0x20) afxIdx
			FOR (f = 0; f < afxNum; ++f) BEGIN
				off = fxOff + (afxIdx + f) * 0x30
				READ_SHORT off opcode
				READ_SLONG (off + 0x04) param1
				READ_SLONG (off + 0x08) param2
				PATCH_IF (opcode = 126 OR opcode = 176) BEGIN
					isNegative = 0
					PATCH_MATCH param2 WITH
						0	// cumulative
						BEGIN
							PATCH_IF (param1 < 0) BEGIN
								isNegative = 1
							END
						END
						1	// flat
						BEGIN
							PATCH_IF (param1 < 10) BEGIN
								isNegative = 1
							END
						END
						2	// percentage
						BEGIN
							PATCH_IF (param1 < 100) BEGIN
								isNegative = 1
							END
						END
						DEFAULT
						//
					END
					PATCH_IF isNegative BEGIN
						WRITE_SHORT off 126
					END ELSE BEGIN
						WRITE_SHORT off 176
					END
				END
			END
		END
		FOR (f = 0; f < fxNum; ++f) BEGIN
			off = fxOff + f * 0x30
			READ_SHORT off opcode
			READ_SLONG (off + 0x04) param1
			READ_SLONG (off + 0x08) param2
			PATCH_IF (opcode = 126 OR opcode = 176) BEGIN
				isNegative = 0
				PATCH_MATCH param2 WITH
					0	// cumulative
					BEGIN
						PATCH_IF (param1 < 0) BEGIN
							isNegative = 1
						END
					END
					1	// flat
					BEGIN
						PATCH_IF (param1 < 10) BEGIN
							isNegative = 1
						END
					END
					2	// percentage
					BEGIN
						PATCH_IF (param1 < 100) BEGIN
							isNegative = 1
						END
					END
					DEFAULT
					//
				END
				PATCH_IF isNegative BEGIN
					WRITE_SHORT off 126
				END ELSE BEGIN
					WRITE_SHORT off 176
				END
			END
		END
	END
END

DEFINE_PATCH_FUNCTION FA_REWRITE_MOVE_MODS_CRE
BEGIN
	LPF SANITIZE_CRE RET ok = ok END
	PATCH_IF ok BEGIN
		READ_LONG 0x2c4 fxOff
		READ_LONG 0x2c8 fxNum
		FOR (f = 0; f < fxNum; ++f) BEGIN
			off = fxOff + f * 0x108
			READ_LONG (off + 0x08) opcode
			READ_SLONG (off + 0x14) param1
			READ_SLONG (off + 0x18) param2
			PATCH_IF (opcode = 126 OR opcode = 176) BEGIN
				isNegative = 0
				PATCH_MATCH param2 WITH
					0	// cumulative
					BEGIN
						PATCH_IF (param1 < 0) BEGIN
							isNegative = 1
						END
					END
					1	// flat
					BEGIN
						PATCH_IF (param1 < 10) BEGIN
							isNegative = 1
						END
					END
					2	// percentage
					BEGIN
						PATCH_IF (param1 < 100) BEGIN
							isNegative = 1
						END
					END
					DEFAULT
					//
				END
				PATCH_IF isNegative BEGIN
					WRITE_LONG (off + 0x08) 126
				END ELSE BEGIN
					WRITE_LONG (off + 0x08) 176
				END
			END
		END
	END
END

